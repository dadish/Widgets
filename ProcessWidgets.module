<?php

class ProcessWidgets extends Process implements Module {

  protected $widgets;

  protected $breakpoints;

  protected $jsSettings = array();
  
  public static function getModuleInfo() {
    return array(
      'title' => 'Process Widgets',        // printable name/title of module
      'version' => 001,       // version number of module
      'summary' => _('Helps to manage widgets.'),      // one sentence summary of module
      'icon' => 'cubes',
      'requires' => array('Widgets', 'JqueryCore', 'JqueryUI', 'JqueryMagnific'),
      'autoload' => 'process=ProcessPageEdit|ProcessTemplate',
      'page' => array(
        'parent' => 'setup',
        'name' => 'widgets',
        'title' => 'Widgets',
        'status' => array('hidden')
        )
      );
  }

  public function init()
  {
    parent::init();
    $this->requireHelperClasses();
    $this->addHookAfter('ProcessPageEdit::buildForm', $this, 'hookPageWidgetsTab');
    $this->addHookAfter('ProcessTemplate::buildEditForm', $this, 'hookTemplateWidgetsTab');
    $this->widgets = $this->modules->get('Widgets');
    $this->breakpoints = $this->modules->get('Breakpoints');

    $this->jsSettings['updateInterval'] = 5000;
    $this->jsSettings['notify'] = ($this->modules->has('SystemNotifications')) ? true : false;

    // make sure neccessary assets are loaded
    $this->modules->get('JqueryCore');
    $this->modules->get('JqueryUI');
    $this->modules->get('JqueryMagnific');
  }

  protected function setJsSettings()
  {
    $this->config->js($this->className(), $this->jsSettings);
  }

  public function execute()
  {
    return '';
  }

  public function executeCreate()
  {
    $owner = (integer) $this->sanitizer->text($this->input->owner);
    $ownerType = (integer) $this->sanitizer->text($this->input->ownerType);
    $parent = (integer) $this->sanitizer->text($this->input->parent);
    
    $widget = $this->modules->get('WidgetHeading');
    $widget->owner = $owner;
    $widget->ownerType = $ownerType;
    if ($parent) $widget->parent = $parent;
    $widget->save();

    $defaultBrk = $this->breakpoints->makeBlankItem();
    $defaultBrk->media = 'default';
    $defaultBrk->widget = $widget->id;
    $defaultBrk->save();

    return InputfieldWidgets::renderWidget($widget);
  }

  protected function createNewFrom($arr = array())
  {
    $widget = $this->modules->get($arr['className']);
    unset($arr['id']);
    $widget->setArray($arr);
    $widget->save();

    // Create breakpoints too
    foreach ($arr['breakpoints'] as $brkArr) {
      $brkArr['widget'] = $widget->id;
      unset($brkArr['id']);
      $brk = $this->breakpoints->makeBlankItem();
      $brk->setArray($brkArr);
      $brk->save();
    }

    return $widget;
  }

  protected function batchCreateNewFrom($arr = array(), $owner = 0, $ownerType = 0)
  {
    if (!$owner || !$ownerType) throw new WireException("Please provide an owner and an ownerType.");
    
    $out = new WidgetArray();
    foreach ($arr as $r) {
      $r['owner'] = $owner;
      $r['ownerType'] = $ownerType;
      $out->add($this->createNewFrom($r));
    }
    return $out;
  }

  public function executeCopy()
  {
    $widgets = json_decode($this->sanitizer->textarea($this->input->widgets), true);
    $owner = (integer) $this->sanitizer->text($this->input->owner);
    $ownerType = (integer) $this->sanitizer->text($this->input->ownerType);
    return json_encode($this->batchCreateNewFrom($widgets, $owner, $ownerType)->getArray());
  }

  public function executeDelete()
  {
    $widgetId = (integer) $this->sanitizer->text($this->input->widgetId);
    if ($this->widgets->delete($widgetId)) {
      $this->breakpoints->deleteAllForWidget($widgetId);
      return '{"error" : false}';
    } else {
      return '{"error" : true}';
    }
  }

  public function executeUpdate()
  {
    $updatedWidgets = array();
    $widgets = json_decode($this->sanitizer->textarea($this->input->widgets), true);
    foreach ($widgets as $arr) {
      $id = $arr['id'];
      $widget = $this->widgets->get($id);
      $widget->setArray($arr);
      $breakpoints = $arr['breakpoints'];
      $saved = array();
      foreach ($breakpoints as $brkArr) {
        $brk = $this->breakpoints->get($brkArr['id']);
        $brk->setArray($brkArr);
        $saved[] = $brk->save();
      }      

      $updatedWidgets[$widget->id] = $widget->save() && !in_array(false, $saved);
    }

    foreach ($updatedWidgets as $key => $updated) {
      if (!$updated) {
        return json_encode(array(
          'error' => true,
          'message' => "Couldn't update the widget $key."
        ));
      }
    }

    $out = new WidgetArray();
    foreach ($updatedWidgets as $key => $update) $out->add($this->widgets->get($key));

    return json_encode($out->getArray());
  }

  public function executeChangeType()
  {
    $arr = json_decode($this->sanitizer->textarea($this->input->widget), true);
    $id = $arr['id'];
    $className = $arr['className'];
    $widget = $this->widgets->get($id);
    $newWidget = $this->modules->get($className);
    $newWidget->setArray($widget->getArray());
    $this->widgets->remove($widget);
    $newWidget->save();
    return InputfieldWidgets::renderWidget($this->widgets->get($id));
  }

  public function executeSettings()
  {
    // Stop ProcessWidgets.js from booting
    $this->jsSettings['stop'] = true;
    $this->setJsSettings();

    $id = (integer) $this->sanitizer->text($this->input->id);
    $widget = $this->widgets->get($id);
    $classname = $widget->className();
    $fields = $widget->getSettingsFields();
    $fields->label = $classname::getModuleInfo()['title'];

    $form = new InputfieldForm();
    $form->attr('action', $this->config->urls->admin . 'setup/widgets/Settings/');
    $form->attr('method', 'POST');
    $form->label = $this->_('Settings Form Label');

    // Add a settings fields from widget to form
    $form->add($fields);

    // Add a hidden id field, where the widget id will be
    $field = $this->modules->get('InputfieldHidden');
    $field->name = 'id';
    $field->value = $id;
    $form->add($field);

    // Add a submit button
    $submit = $this->modules->get('InputfieldSubmit');
    $submit->name = 'submit_sidget_settings_save';
    $submit->attr('value', $this->_('Save'));
    $form->add($submit);

    if ($this->input->post->submit_sidget_settings_save) {
      $form->processInput($this->input->post);
      if (!count($form->getErrors())) {
        $widget->processSettingsFields($form);
        if (!count($form->getErrors())) {
          $widget->save();  
        }
      }
    }

    return $form->render();
  }

  public function executeCreateBreakpoint()
  {
    $widgetId = (integer) $this->sanitizer->text($this->input->widgetId);
    $brk = $this->breakpoints->makeBlankItem();
    $brk->widget = $widgetId;
    $brk->media = array(0, 1000);
    $brk->save();
    return json_encode($brk->getArray());
  }

  public function executeDeleteBreakpoint()
  {
    $brkId = (integer) $this->sanitizer->text($this->input->id);
    if ($this->breakpoints->delete($brkId)) {
      return '{"error" : false}';
    } else {
      return '{"error" : true}';
    }
  }

  public function executeSort()
  {
    return 'executeSort';
  }

  protected function buildWidgetTab($target = null)
  {
    $this->modules->get('InputfieldTextarea');
    $wrapper = new InputfieldWrapper();
    $id = $this->className();
    $wrapper->attr('id', $id);
    $title = $this->_('Widget Settings'); // Tab Label: Widgets Settings
    $wrapper->attr('title', $title); 

    $widgetsField = new InputfieldWidgets();
    $widgetsField->setWidget($this->widgets->get(1));

    if ($target instanceof Page || $target instanceof Template) {
      $widgets = $target->widgets;
    } else {
      throw new WireException("This scenario has not been considered.");
    }
    foreach ($widgets->filter("parent=1") as $widget) {
      $widgetsField->add($widget);
    }

    $wrapper->add($widgetsField);

    $wrapper->add($this->getBreakpointCustomCssEditorFields());

    // WidgetsUpdate Button
    $button = $this->modules->get('InputfieldButton');
    $button->attr('id', 'WidgetsBatchUpdate');
    $button->attr('value', $this->_('Update Widgets'));
    $button->name = "WidgetsBatchUpdate";
    $wrapper->add($button);

    return $wrapper;
  }

  protected function getBreakpointCustomCssEditorFields()
  {
    $fields = new InputfieldWrapper();
    $fields->attr('class', 'CustomCssEditorFields InputfieldHidden');
    $fields->attr('id', 'CustomCssEditorFields');

    $field = $this->modules->get('InputfieldTextarea');
    $field->attr('spellcheck', "false");
    $field->name = 'CustomCss';
    $field->label = $this->_('Extra CSS rules');
    $field->description = $this->_("Write custom css with regular css syntax.\n E.g. \n `color : #666; \n border : 1px solid #333;`");
    $field->rows = 7;
    $fields->add($field);

    return $fields;
  }

  public function hookPageWidgetsTab(HookEvent $event)
  {
    // Find out what page we are editing
    $id = (int) $this->input->post('id');
    if(!$id) $id = (int) $this->input->get('id');
    $page = $this->pages->get("id=$id");
    $this->jsSettings['owner'] = $page->id;
    $this->jsSettings['ownerType'] = Widget::ownerTypePage;
    $this->setJsSettings();

    $form = $event->arguments[0];
    $processPageEdit = $event->object;
    $widgetsTab = $this->buildWidgetTab($page);
    $processPageEdit->addTab($widgetsTab->attr('id'), $this->_('Widgets'));
    $form->insertBefore($widgetsTab, $form->get('submit_save'));
    $event->return = $form;
  }

  public function hookTemplateWidgetsTab(HookEvent $event)
  {
    $template = $event->arguments[0];
    $form = $event->return;
    $this->jsSettings['owner'] = $template->id;
    $this->jsSettings['ownerType'] = Widget::ownerTypeTemplate;
    $this->setJsSettings();
    
    $processTemplate = $event->object;
    $widgetsTab = $this->buildWidgetTab($template);
    $widgetsTab->attr('title', $this->_('Widgets'));
    $widgetsTab->attr('class', 'WireTab');
    $form->insertBefore($widgetsTab, $form->get('submit'));
    $event->return = $form;
  }

  protected function requireHelperClasses()
  {
    require_once(__DIR__ . "/Inputfields/InputfieldWidgetSettings.php");
    require_once(__DIR__ . "/Inputfields/InputfieldWidget.php");
    require_once(__DIR__ . "/Inputfields/InputfieldWidgets.php");
    require_once(__DIR__ . "/Inputfields/InputfieldBreakpoints.php");
  }
}