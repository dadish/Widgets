<?php

class ProcessWidgets extends Process implements Module {

  protected $widgets = null;

  protected $jsSettings = array();
  
  public static function getModuleInfo() {
    return array(
      'title' => 'Process Widgets',        // printable name/title of module
      'version' => 001,       // version number of module
      'summary' => _('Helps to manage widgets.'),      // one sentence summary of module
      'icon' => 'cubes',
      'requires' => array('Widgets', 'JqueryMagnific'),
      'autoload' => 'process=ProcessPageEdit|ProcessTemplate',
      'page' => array(
        'parent' => 'setup',
        'name' => 'widgets',
        'title' => 'Widgets',
        'status' => array('hidden')
        )
      );
  }

  public function init()
  {
    parent::init();
    $this->requireHelperClasses();
    $this->addHookAfter('ProcessPageEdit::buildForm', $this, 'hookPageWidgetsTab');
    $this->widgets = $this->modules->get('Widgets');

    $this->jsSettings['updateInterval'] = 5000;
    $this->jsSettings['notify'] = ($this->modules->has('SystemNotifications')) ? true : false;
  }

  protected function setJsSettings()
  {
    $this->config->js($this->className(), $this->jsSettings);
  }

  public function execute()
  {
    return '';
  }

  public function executeCreate()
  {
    $owner = (integer) $this->sanitizer->text($this->input->owner);
    $ownerType = (integer) $this->sanitizer->text($this->input->ownerType);
    $parent = (integer) $this->sanitizer->text($this->input->parent);
    
    $widget = $this->modules->get('WidgetHeading');
    $widget->owner = $owner;
    $widget->ownerType = $ownerType;
    if ($parent) $widget->parent = $parent;
    $widget->save();

    return InputfieldWidgets::renderWidget($widget);
  }

  public function executeDelete()
  {
    $widgetId = (integer) $this->sanitizer->text($this->input->widgetId);
    if ($this->widgets->delete($widgetId)) return '{"error" : false}';
    else return '{"error" : true}';
  }

  public function executeUpdate()
  {
    $arr = json_decode($this->sanitizer->textarea($this->input->widget), true);
    $id = $arr['id'];
    $widget = $this->widgets->get($id);
    $widget->setArray($arr);
    $widget->save();
    return json_encode($widget->getArray());
  }

  public function executeChangeType()
  {
    $arr = json_decode($this->sanitizer->textarea($this->input->widget), true);
    $id = $arr['id'];
    $className = $arr['className'];
    $widget = $this->modules->get($className);
    $widget->setArray($arr);
    $widget->save();
    return InputfieldWidgets::renderWidget($this->widgets->get($id));
  }

  public function executeSettings()
  {
    // Stop ProcessWidgets.js from booting
    $this->jsSettings['stop'] = true;
    $this->setJsSettings();

    $id = (integer) $this->sanitizer->text($this->input->id);
    $widget = $this->widgets->get($id);
    $wrapper = $widget->getSettingsForm();

    if ($this->input->post->submit_sidget_settings_save) {
      $wrapper->processInput($this->input->post);
      if (!count($wrapper->getErrors())) {
        $widget->processSettings($wrapper);
        $widget->save();
      }
    }

    $form = new InputfieldForm();
    $form->attr('action', $this->config->urls->admin . 'setup/widgets/Settings/');
    $form->attr('method', 'POST');
    $form->label = $this->_('Settings Form Label');

    // Add a settings fields from widget to form
    $form->add($wrapper);

    // Add a hidden id field, where the widget id will be
    $field = $this->modules->get('InputfieldHidden');
    $field->name = 'id';
    $field->value = $id;
    $form->add($field);

    // Add a submit button
    $submit = $this->modules->get('InputfieldSubmit');
    $submit->name = 'submit_sidget_settings_save';
    $submit->attr('value', $this->_('Save'));
    $form->add($submit);
    return $form->render();
  }

  protected function buildWidgetTab($target = null)
  {
    $this->modules->get('InputfieldTextarea');
    $wrapper = new InputfieldWrapper();
    $id = $this->className();
    $wrapper->attr('id', $id);
    $title = $this->_('Widget Settings'); // Tab Label: Widgets Settings
    $wrapper->attr('title', $title); 

    $widgetsField = new InputfieldWidgets();
    $widgetsField->setWidget($this->widgets->get(1));

    if ($target instanceof Page || $target instanceof Template) {
      $widgets = $target->widgets;
    } else {
      throw new WireException("This scenario has not been considered.");
    }
    foreach ($widgets as $widget) {
      $widgetsField->add($widget);
    }

    $wrapper->add($widgetsField);

    // WidgetsUpdate Button
    $button = $this->modules->get('InputfieldButton');
    $button->attr('id', 'WidgetsBatchUpdate');
    $button->attr('value', $this->_('Update Widgets'));
    $button->name = "WidgetsBatchUpdate";
    $wrapper->add($button);

    return $wrapper;
  }

  public function hookPageWidgetsTab(HookEvent $event)
  {
    // Find out what page we are editing
    $id = (int) $this->input->post('id');
    if(!$id) $id = (int) $this->input->get('id');
    $page = wire('pages')->get("id=$id");
    $this->jsSettings['owner'] = $page->id;
    $this->jsSettings['ownerType'] = Widget::ownerTypePage;
    $this->setJsSettings();

    $form = $event->arguments[0];
    $processPageEdit = $event->object;
    $widgetsTab = $this->buildWidgetTab($page);
    $processPageEdit->addTab($widgetsTab->attr('id'), 'Widgets');
    $form->insertBefore($widgetsTab, $form->get('submit_save'));
    $event->return = $form;
  }

  protected function requireHelperClasses()
  {
    require_once(__DIR__ . "/Breakpoints.php");
    require_once(__DIR__ . "/Widget.php");
    require_once(__DIR__ . "/WidgetArray.php");
    require_once(__DIR__ . "/PageWidgets.php");
    require_once(__DIR__ . "/Inputfields/InputfieldWidgetSettings.php");
    require_once(__DIR__ . "/Inputfields/InputfieldWidget.php");
    require_once(__DIR__ . "/Inputfields/InputfieldWidgets.php");
    require_once(__DIR__ . "/Inputfields/InputfieldBreakpoints.php");
  }
}