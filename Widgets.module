<?php

/**
 * 
 * Widgets - A ProcessWire module.
 * Helps to build responsive websites with ease.
 * 
 * @todo implement a remove method!
 * @todo widgets module api should derive from $page->widgets
 * @todo implement an `assets(string)` method that returns the necessary js and css for editing widgets at the front end
 * @todo implement a `new()` method that returns a new widget with owner assigned. Consider all three types of owners
 * @todo implement a `css()` method that returns a css string for all involved widgets
 * @todo implement a `cssMin()` method that returns a minified css string of the `css()` method
 * @todo implement widget sorting capabilities
 */

class Widgets extends WidgetArray implements Module {

  /**
   * Table created by this module
   *
   */
  const dbTableName = 'widgets';

  /**
   * Quick reference to database
   *
   */
  protected $database;

  /**
   * getModuleInfo is a module required by all modules to tell ProcessWire about them
   *
   * @return array
   *
   */
  public static function getModuleInfo() {
    return array(
      'title' => 'Widgets', 
      'version' => 001, 
      'summary' => __('Helps to build responsive websites with ease.'),
      'singular' => true, 
      'autoload' => true, 
      'icon' => 'cubes', 
      );
  }

  /**
   * Construct
   *
   */
  public function __construct() {
    parent::__construct();
    $this->database = wire('database');
  }

  /**
   * Initialize the module
   *
   */
  public function init() {
    $this->addHookProperty('Page::widgets', $this, 'pageWidgets');
    $this->addHookProperty('Template::widgets', $this, 'templateWidgets');
  }

  protected function pageWidgets(HookEvent $event)
  {
    $page = $event->object;
    $ownerId = $this->fetchAllForPage($page);
    $event->return = new PageWidgets($ownerId);
  }

  protected function templateWidgets(HookEvent $event)
  {
    $template = $event->object;
    $ownerId = $this->fetchAllForTemplate($template);
    $event->return = new TemplateWidgets($ownerId);
  }

  public function save(Widget $widget)
  {
    $widget->reportIfErrors();
    if (!$widget->isChanged()) return $widget;
    $table = self::dbTableName;
    $arr = $widget->getArray();
    $data = array(
      'renderPages' => $arr['renderPages'],
      'breakpoints' => $arr['breakpoints'],
      'breakpointsString' => $arr['breakpointsString'],
      'options' => $arr['options'],
      'class' => $arr['class'],
      'className' => $arr['className']
      );
    $params = array(
      ':owner' => $arr['owner'],
      ':ownerType' => $arr['ownerType'],
      ':parent' => $arr['parent'],
      ':data' => json_encode($data),
      );
    if ($widget->isNew()) {
      $sql = "INSERT INTO $table (owner, ownerType, parent, data) VALUES(:owner, :ownerType, :parent, :data)";  
    } else {
      $sql = "UPDATE $table SET owner = :owner, ownerType = :ownerType, parent = :parent, data = :data WHERE id = :id";
      $params['id'] = $widget->id;
    }
    $stmt = $this->database->prepare($sql);
    $stmt->execute($params);
    $id = $this->database->lastInsertId();
    $widget->set('id', $id);
    if (!$this->has($widget)) $this->add($widget);
    $widget->resetTrackChanges();
    return $widget;
  }

  public function delete($key)
  {
    $table = self::dbTableName;
    $widget = $this->get($key);
    $stmt = $this->database->prepare("DELETE FROM $table WHERE id = :widget_id LIMIT 1");
    $stmt->execute(array('widget_id' => $widget->id));
    if ($stmt->rowCount()) {
      $this->remove($key);
      return true;
    } else {
      return false;
    }
  }

  /**
   * 
   * 
   */
  protected function fetchAllForPage(Page $page)
  {
    // Try to get widgets assigned to Page itself
    // If there are no widgets then get widgets for Page's template
    $widgets = $this->fetchAllByOwner($page->id, Widget::ownerTypePage);
    if ($widgets->count()) {
      return $page->id;
    } else {
      $this->fetchAllByOwner($page->template->id, Widget::ownerTypeTemplate);
      return $page->template->id;
    }
  }

  protected function fetchAllForTemplate(Template $template)
  {
    // Try to get widgets assigned to Template.
    $this->fetchAllByOwner($template->id, Widget::ownerTypeTemplate);
    return $template->id;
  }

  public function fetchAllByOwner($owner, $ownerType)
  {
    $owner = (integer) $owner;
    $ownerType = (integer) $ownerType;
    $table = self::dbTableName;

    $sql = "SELECT * FROM $table WHERE owner = $owner AND ownerType = $ownerType";
    $stmt = $this->database->prepare($sql);
    $stmt->execute();
    if ($stmt->rowCount()) {
      return $this->dataToWidgets($stmt->fetchAll(PDO::FETCH_ASSOC));
    }
    // if there is no widgets then return empty array of widgets
    return new WidgetArray();
  }

  public function get($key)
  {
    if ($this->has($key)) return parent::get($key);
    return $this->fetch($key);
  }

  protected function fetch($key)
  {
    $table = self::dbTableName;
    if (is_object($key)) $key = $this->getItemKey($key);
    $sql = "SELECT * FROM $table WHERE id = :id";
    $stmt = $this->database->prepare($sql);
    $stmt->execute(array(
      ':id' => $key
      ));
    if ($stmt->rowCount()) return $this->dataToWidget($stmt->fetchAll(PDO::FETCH_ASSOC)[0]);
    return null;
  }

  protected function dataToWidget($raw)
  {
    $raw['data'] = json_decode($raw['data'], true);
    $data = array();
    $data['id'] = $raw['id'];
    $data['owner'] = $raw['owner'];
    $data['ownerType'] = $raw['ownerType'];
    $data['parent'] = $raw['parent'];
    $data['renderPages'] = $raw['data']['renderPages'];
    $data['breakpoints'] = $raw['data']['breakpoints'];
    $data['class'] = $raw['data']['class'];
    $data['options'] = $raw['data']['options'];
  
    $className = $raw['data']['className'];
    $widget = $this->modules->get($className);
    $widget->setArray($data);
    $widget->resetTrackChanges();
    if (!$this->has($widget)) $this->append($widget);
    return $widget;
  }

  protected function dataToWidgets($raw)
  {
    $widgets = new WidgetArray();
    foreach ($raw as $data) $widgets->add($this->dataToWidget($data));
    return $widgets;
  }

  public function assets($type = null)
  {
    $out = "";
    if (is_null($type)) {
      $out .= $this->cssAssets();
      $out .= $this->jsAssets();
    } else if ($type === 'css') {
      $out .= $this->cssAssets();
    } else if ($type === 'js') {
      $out .= $this->jsAssets();
    }
    return $out;
  }

  protected function jsAssets()
  {
    $jsConfig = array(
      'toolbarUrl' => $this->config->urls->admin . 'setup/widgets/?modal=1'
      );
    $scripts = "<script>var WidgetsConfig = JSON.parse('". json_encode($jsConfig) ."');</script>";
    if ($this->config->debug) {
      $scripts .= "<script data-main='". $this->config->urls->Widgets ."/js/Boot' src='" . $this->config->urls->Widgets . "/deps/requirejs/require.js'></script>";
    } else {
      $scripts .= "<script src'". $this->config->urls->Widgets ."build/widgets.js'></script>";
    }
    return $scripts;
  }

  protected function cssAssets()
  {
    return "<link rel='stylesheet' type='text/css' href='". $this->config->urls->Widgets ."css/widgets.css' />";
  }

  /**
   * Install sessions table
   *
   */
  public function ___install() {
    
    $table = self::dbTableName;

    $sql =   "CREATE TABLE $table (
      id INT UNSIGNED NOT NULL AUTO_INCREMENT,
      owner INT UNSIGNED NOT NULL,
      ownerType INT(1) NOT NULL,
      parent INT UNSIGNED NOT NULL DEFAULT 1,
      data TEXT,
      PRIMARY KEY (id), 
      INDEX (owner), 
      INDEX (ownerType), 
      INDEX (parent)
      ) ENGINE=MyISAM AUTO_INCREMENT=2 DEFAULT CHARSET=utf8";

    $this->database->query($sql); 
  }

  /**
   * Drop sessions table
   *
   */
  public function ___uninstall() {
    $this->database->query("DROP TABLE " . self::dbTableName); 
  }

  public function __debugInfo()
  {
    $info = parent::__debugInfo();
    $info['widgets'] = array();
    foreach ($this->widgets as $widget) $info['widgets'][] = $widget->__debugInfo();
    return $info;
  }
}