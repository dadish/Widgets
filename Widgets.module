<?php

/**
 * 
 * Widgets - A ProcessWire module.
 * Helps to build responsive websites with ease.
 * 
 * @todo implement widget sorting capabilities
 */

class Widgets extends WidgetArray implements Module {

  /**
   * Table created by this module
   *
   */
  const dbTableName = 'widgets';

  /**
   * Quick reference to database
   *
   */
  protected $database;

  public $prefix = '';

  /**
   * getModuleInfo is a module required by all modules to tell ProcessWire about them
   *
   * @return array
   *
   */
  public static function getModuleInfo() {
    return array(
      'title' => 'Widgets', 
      'version' => 005, 
      'summary' => __('Helps to build responsive websites with ease.'),
      'singular' => true, 
      'autoload' => true,
      'requires' => array('Breakpoints'),
      'icon' => 'cubes', 
      );
  }

  /**
   * Construct
   *
   */
  public function __construct() {
    parent::__construct();
    $this->database = wire('database');
  }

  /**
   * Initialize the module
   *
   */
  public function init() {
    $this->addHookProperty('Page::widgets', $this, 'pageWidgets');
    $this->addHookProperty('Template::widgets', $this, 'templateWidgets');
    $this->addHook('Page::hasWidgets', $this, 'pageHasWidgets');
    $this->addHook('Template::hasWidgets', $this, 'templateHasWidgets');

    // Initiate default parent widget
    $parent = $this->makeBlankItem();
    $parent->id = 1;
    $parent->resetTrackChanges();
    $this->add($parent);

    // The widget id prefix
    $this->prefix = 'wgts';
  }

  protected function pageWidgets(HookEvent $event)
  {
    $page = $event->object;
    
    // Check if page is already have it's widgets
    // and return if it has
    $pageWidgets = $page->get('pageWidgets');    
    if (!is_null($pageWidgets) && $pageWidgets instanceof TemplateWidgets) {
      $event->return = $pageWidgets;
      return;
    }

    // Else fetch all widgets and populate an object for
    // pageWidgets
    $arr = $this->fetchAllForPage($page);
    if ($arr['ownerType'] === Widget::ownerTypePage) {
      $pageWidgets = new PageWidgets($arr['ownerId']);
    } else {
      $pageWidgets = new TemplateWidgets($arr['ownerId']);
    }

    // Set pageWidgets to the page before returning
    $page->setQuietly('pageWidgets', $pageWidgets);
    $event->return = $pageWidgets;
  }

  protected function templateWidgets(HookEvent $event)
  {
    $template = $event->object;

    // Check if template is already have it's widgets
    // and return if it has
    $templateWidgets = $template->get('templateWidgets');    
    if (!is_null($templateWidgets) && $templateWidgets instanceof TemplateWidgets) {
      $event->return = $templateWidgets;
      return;
    }

    $ownerId = $this->fetchAllForTemplate($template);
    $templateWidgets = new TemplateWidgets($ownerId);
    
    // Set templateWidgets to the template before returning
    $template->setQuietly('templateWidgets', $templateWidgets);
    $event->return = $templateWidgets;
  }

  public function pageHasWidgets(HookEvent $event)
  {
    $event->return = (boolean) $this->fetchCountForOwner($event->object->id, Widget::ownerTypePage);
  }

  public function templateHasWidgets(HookEvent $event)
  {
    $event->return = (boolean) $this->fetchCountForOwner($event->object->id, Widget::ownerTypeTemplate);
  }

  public function save(Widget $widget)
  {
    if (!$widget->isChanged()) return $widget;
    $table = self::dbTableName;
    $arr = $widget->getArray(false);

    $params = array(
      ':owner' => $arr['owner'],
      ':ownerType' => $arr['ownerType'],
      ':parent' => $arr['parent'],
      ':data' => json_encode($arr['data'])
      );
    if ($widget->isNew()) {
      $sql = "INSERT INTO $table (owner, ownerType, parent, data, sort) VALUES(:owner, :ownerType, :parent, :data, :sort)";

      // Get the count for all widgets with the particular parent
      // This way we get the sort for new widget
      $stmt = $this->database->prepare("SELECT COUNT(*) FROM $table WHERE parent = :parent AND owner = :owner");
      $stmt->execute(array(
        ':parent' => $arr['parent'],
        ':owner' => $arr['owner']
        ));
      $params[':sort'] = $stmt->fetch(PDO::FETCH_ASSOC)['COUNT(*)'];
    } else {
      $sql = "UPDATE $table SET owner = :owner, ownerType = :ownerType, parent = :parent, data = :data, sort = :sort WHERE id = :id";
      $params[':sort'] = $arr['sort'];
      $params[':id'] = $arr['id'];
    }
    $stmt = $this->database->prepare($sql);
    $stmt->execute($params);
    $id = $this->database->lastInsertId();
    if ($widget->isNew()) $widget->set('id', $id);
    if (!$this->has($widget)) $this->add($widget);
    $widget->resetTrackChanges();
    return $widget;
  }

  public function sort($ids)
  {
    $table = self::dbTableName;
  }

  public function delete($key)
  {
    $table = self::dbTableName;
    $widget = $this->get($key);
    $stmt = $this->database->prepare("DELETE FROM $table WHERE id = :widget_id LIMIT 1");
    $stmt->execute(array('widget_id' => $widget->id));
    if ($stmt->rowCount()) {
      $this->remove($key);
      return true;
    } else {
      return false;
    }
  }

  /**
   * 
   * 
   */
  protected function fetchAllForPage(Page $page)
  {
    $out = array(
      'ownerId' => $page->id,
      'ownerType' => Widget::ownerTypePage
      );
    // Try to get widgets assigned to Page itself
    // If there are no widgets then get widgets for Page's template
    $widgets = $this->fetchAllByOwner($page->id, Widget::ownerTypePage);
    if ($widgets->count()) {
      return $out;
    } else {
      $this->fetchAllByOwner($page->template->id, Widget::ownerTypeTemplate);
      $out['ownerId'] = $page->template->id;
      $out['ownerType'] = Widget::ownerTypeTemplate;
      return $out;
    }
  }

  protected function fetchAllForTemplate(Template $template)
  {
    // Try to get widgets assigned to Template.
    $this->fetchAllByOwner($template->id, Widget::ownerTypeTemplate);
    return $template->id;
  }

  public function fetchAllByOwner($owner, $ownerType)
  {
    $owner = (integer) $owner;
    $ownerType = (integer) $ownerType;
    $table = self::dbTableName;

    $sql = "SELECT * FROM $table WHERE owner = $owner AND ownerType = $ownerType";
    $stmt = $this->database->prepare($sql);
    $stmt->execute();
    if ($stmt->rowCount()) {
      return $this->dataToWidgets($stmt->fetchAll(PDO::FETCH_ASSOC));
    }
    // if there is no widgets then return empty array of widgets
    return new WidgetArray();
  }

  protected function fetchCountForOwner($owner, $ownerType)
  {
    $owner = (integer) $owner;
    $ownerType = (integer) $ownerType;
    $table = self::dbTableName;

    $sql = "SELECT SQL_CALC_FOUND_ROWS id FROM $table WHERE owner = $owner AND ownerType = $ownerType";
    $stmt = $this->database->prepare($sql);
    $stmt->execute();
    $ids = $stmt->fetchAll(PDO::FETCH_COLUMN, 0);
    $total = $this->database->prepare("SELECT FOUND_ROWS()");
    $total->execute();
    return $total->fetch()[0];
  }

  public function get($key)
  {
    if ($this->has($key)) return parent::get($key);
    return $this->fetch($key);
  }

  protected function fetch($key)
  {
    $table = self::dbTableName;
    if (is_object($key)) $key = $this->getItemKey($key);
    $sql = "SELECT * FROM $table WHERE id = :id";
    $stmt = $this->database->prepare($sql);
    $stmt->execute(array(
      ':id' => $key
      ));
    if ($stmt->rowCount()) return $this->dataToWidget($stmt->fetchAll(PDO::FETCH_ASSOC)[0]);
    return null;
  }

  protected function dataToWidget($raw)
  {
    $raw['data'] = json_decode($raw['data'], true);
    $className = $raw['data']['className'];
    $widget = $this->modules->get($className);
    $widget->setArray($raw);
    if (!$this->has($widget)) $this->append($widget);
    $widget->resetTrackChanges();
    return $widget;
  }

  protected function dataToWidgets($raw)
  {
    $widgets = new WidgetArray();
    foreach ($raw as $data) $widgets->add($this->dataToWidget($data));
    return $widgets;
  }

  public function assets($type = null)
  {
    $out = "";
    if (is_null($type)) {
      $out .= $this->cssAssets();
      $out .= $this->jsAssets();
    } else if ($type === 'css') {
      $out .= $this->cssAssets();
    } else if ($type === 'js') {
      $out .= $this->jsAssets();
    }
    return $out;
  }

  protected function jsAssets()
  {
    return '';
  }

  protected function cssAssets()
  {
    $css = new TemplateFile($this->config->paths->Widgets . '/widgets.css');
    $css->set('prefix', $this->prefix);
    return $css->render();
  }

  /**
   * Install sessions table
   *
   */
  public function ___install() {
    
    $table = self::dbTableName;

    $sql =   "CREATE TABLE $table (
      id INT UNSIGNED NOT NULL AUTO_INCREMENT,
      owner INT UNSIGNED NOT NULL,
      ownerType INT(1) NOT NULL,
      parent INT UNSIGNED NOT NULL DEFAULT 1,
      data TEXT,
      sort INT(3),
      PRIMARY KEY (id), 
      INDEX (owner), 
      INDEX (ownerType), 
      INDEX (parent),
      INDEX (sort)
      ) ENGINE=MyISAM AUTO_INCREMENT=2 DEFAULT CHARSET=utf8";

    $this->database->query($sql); 
  }

  /**
   * Drop sessions table
   *
   */
  public function ___uninstall() {
    $this->database->query("DROP TABLE " . self::dbTableName); 
  }

  /**
   * 
   * WidgetsArray overwrites this one. But we need to bring it back so it is compatible
   * with processwires core Wire class
   * 
   */
  public function __toString()
  {
    return $this->className();
  }
}
